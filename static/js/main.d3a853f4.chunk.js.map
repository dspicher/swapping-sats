{"version":3,"sources":["util/blockstream.js","util/recursivePropertyChecker.js","BityFiatAmount.js","TransactionOutputs.js","TransactionInput.js","TransactionRBF.js","util/recursiveRBFChecker.js","App.js","serviceWorker.js","index.js"],"names":["fetch","require","fetchTransaction","txid","a","apiUrl","tx","json","recursivePropertyChecker","currentElement","getNextElements","predicates","stop","holds","fail","counterExample","nextElements","length","Promise","all","map","el","resultsForNext","every","idx","findIndex","concat","module","exports","BityFiatAmount","props","state","isLoaded","amount","error","cryptoAmount","isInput","crypto","toString","fiat","payload","out_field","this","postData","response","parseFloat","url","data","method","headers","body","JSON","stringify","postEstimate","isOutput","then","result","setState","className","toLocaleString","navigator","language","style","currency","CircularProgress","size","React","Component","TransactionOutputs","outputs","Table","TableHead","TableRow","TableCell","TableBody","output","key","addresses","value","styles","theme","textFld","width","height","TransactionInput","e","isValidTxid","target","onTxidChange","Grid","container","spacing","direction","alignItems","justify","item","TextField","id","label","margin","onChange","handleChange","variant","withStyles","rbf","blockstream","isConfirmed","signalsRBF","input","txSignalsRBF","some","getAncestorTransactions","initial","App","res","vout","obj","scriptpubkey_address","script_type","outs","transactionIsNotRBF","ThemeProvider","Card","CardContent","handleTxidChange","TransactionRBF","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3a853f4.chunk.js","sourcesContent":["const fetch = require('node-fetch');\n\nexport async function fetchTransaction(txid) {\n  let apiUrl = 'https://blockstream.info/api/';\n  let txEndpoint = 'tx/';\n  let tx = await fetch(apiUrl + txEndpoint + txid);\n  return tx.json();\n}","async function recursivePropertyChecker(currentElement, getNextElements, predicates) {\n    if (predicates.stop(currentElement)) {\n        return { holds: true }\n    } else if (predicates.fail(currentElement)) {\n        return {\n            holds: false,\n            counterExample: [currentElement]\n        }\n    } else {\n        let nextElements = await getNextElements(currentElement);\n        if (nextElements == null || nextElements.length === 0) {\n            return { holds: true };\n        }\n        let resultsForNext = await Promise.all(nextElements\n            .map(async (el) => await recursivePropertyChecker(el, getNextElements, predicates)));\n        if (resultsForNext.map(el => el.holds).every(a => a)) {\n            return { holds: true };\n        } else {\n            let idx = resultsForNext.findIndex(el => !el.holds);\n            return {\n                holds: false,\n                counterExample: [currentElement].concat(resultsForNext[idx].counterExample)\n            };\n        }\n    }\n}\n\nmodule.exports = {\n    recursivePropertyChecker: recursivePropertyChecker\n}","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\n\nclass BityFiatAmount extends React.Component {\n\n    async postEstimate(cryptoAmount, isInput) {\n        let estimateEndpoint = \"https://exchange.api.bity.com/v2/orders/estimate\";\n        let crypto = { \"currency\": \"BTC\", \"amount\": (cryptoAmount / 10e7).toString() };\n        let fiat = { \"currency\": \"CHF\" };\n        let payload, out_field;\n        if (isInput) {\n            payload = { \"input\": crypto, \"output\": fiat };\n            out_field = \"output\";\n        } else {\n            payload = { \"input\": fiat, \"output\": crypto };\n            out_field = \"input\";\n        }\n        let response = await this.postData(estimateEndpoint, payload);\n        return parseFloat(response[out_field][\"amount\"]);\n    }\n\n    async postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        return await response.json();\n    }\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            amount: null,\n            error: null\n        };\n\n    }\n\n    componentDidMount() {\n        this.postEstimate(this.props.amount,\n            this.props.isOutput).then((result) => this.setState({ amount: result, isLoaded: true }));\n    }\n\n    render() {\n        return (\n            <div className=\"BityFiatAmount\">\n                {this.state.isLoaded ?\n                    <div>{this.state.amount.toLocaleString(navigator.language, { style: 'currency', currency: 'CHF' })}</div> :\n                    <CircularProgress size={20} />\n                }\n            </div>\n        );\n    }\n}\n\n\nBityFiatAmount.propTypes = {\n    amount: PropTypes.number,\n    isOutput: PropTypes.bool\n};\n\nexport default BityFiatAmount;","import React from 'react';\nimport BityFiatAmount from './BityFiatAmount';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport PropTypes from 'prop-types';\n\nclass TransactionOutputs extends React.Component {\n    render() {\n        return (\n            <div className=\"TransactionOutputs\">\n                {this.props.outputs != null ?\n                    <Table >\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Adress</TableCell>\n                                <TableCell>Satoshis</TableCell>\n                                <TableCell>Bity buy</TableCell>\n                                <TableCell>Bity sell</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.props.outputs.map((output, key) => (\n                                <TableRow key={key}>\n                                    <TableCell>{output.addresses}</TableCell>\n                                    <TableCell>{output.value.toLocaleString()}</TableCell>\n                                    <TableCell><BityFiatAmount isOutput={false} amount={output.value} /></TableCell>\n                                    <TableCell><BityFiatAmount isOutput={true} amount={output.value} /></TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table> :\n                    <p>Enter a valid TXID</p>\n                }\n            </div>\n        );\n    }\n}\n\nTransactionOutputs.propTypes = {\n    outputs: PropTypes.array\n};\n\nexport default TransactionOutputs;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    textFld: { width: 1000, height: 40 }\n});\n\n\nclass TransactionInput extends React.Component {\n\n    isValidTxid(txid) {\n        return txid != null && txid.length === 64;\n    }\n\n    handleChange(e) {\n        if (this.isValidTxid(e.target.value)) {\n            this.props.onTxidChange(e.target.value);\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"TransactionInput\">\n                <Grid\n                    container\n                    spacing={5}\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    justify=\"center\"\n                >\n                    <Grid item>\n                        <TextField\n                            id=\"outlined-basic\"\n                            label=\"TXID\"\n                            margin=\"normal\"\n                            onChange={(e) => this.handleChange(e)}\n                            variant=\"outlined\"\n                            style={styles.textFld}\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nTransactionInput.propTypes = {\n    onTxidChange: PropTypes.func\n};\n\nexport default withStyles(styles)(TransactionInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TransactionInput extends React.Component {\n    render() {\n        return (\n            <div className=\"TransactionInput\">\n                {this.props.rbf != null ?\n                    (this.props.rbf.holds ?\n                        <p>not rbf</p> :\n                        (this.props.rbf.counterExample.length === 1 ?\n                            <p>This transaction signals RBF</p> :\n                            <div>\n                                <p>The following unconfirmed ancestor transaction signals RBF</p>\n                                <p>{this.props.rbf.counterExample[this.props.rbf.counterExample.length - 1].txid}</p>\n                            </div>\n                        )\n                    ) :\n                    <p></p>}\n            </div>\n        );\n    }\n}\n\nTransactionInput.propTypes = {\n    rbf: PropTypes.object\n};\n\nexport default TransactionInput;\n","var blockstream = require('./blockstream.js');\nvar recursivePropertyChecker = require('./recursivePropertyChecker');\n\nfunction isConfirmed(tx) {\n    return tx[\"status\"][\"confirmed\"];\n}\n\nfunction signalsRBF(input) {\n    return input[\"sequence\"] < 2 ** 32 - 2;\n}\n\nfunction txSignalsRBF(tx) {\n    return tx[\"vin\"].map(signalsRBF).some(a => a);\n}\n\nfunction getAncestorTransactions(tx) {\n    return Promise.all(tx[\"vin\"].map((input) => blockstream.fetchTransaction(input[\"txid\"])));\n}\n\nexport async function transactionIsNotRBF(txid) {\n    let predicates = { stop: isConfirmed, fail: txSignalsRBF }\n    let initial = await blockstream.fetchTransaction(txid);\n    return await recursivePropertyChecker.recursivePropertyChecker(initial, getAncestorTransactions, predicates);\n}\n","import React from 'react';\nimport TransactionOutputs from './TransactionOutputs';\nimport TransactionInput from './TransactionInput';\nimport TransactionRBF from './TransactionRBF';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport './App.css';\nimport { fetchTransaction } from './util/blockstream';\nimport { transactionIsNotRBF } from './util/recursiveRBFChecker';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst styles = theme => ({});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      outputs: null,\n      rbf: null\n    };\n  }\n\n  handleTxidChange(txid) {\n    fetchTransaction(txid)\n      .then(res => res.vout)\n      .then(result => result.map((obj) => {\n        return {\n          value: obj.value,\n          addresses: obj.scriptpubkey_address,\n          script_type: obj.script_type,\n        }\n      })).then((outs) => this.setState({\n        outputs: outs\n      }));\n\n    transactionIsNotRBF(txid).then(\n      res => this.setState({ rbf: res })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <ThemeProvider>\n          <Card className=\"main-card\">\n            <CardContent>\n              <TransactionInput onTxidChange={(txid) => this.handleTxidChange(txid)} />\n              <TransactionRBF rbf={this.state.rbf} />\n              <TransactionOutputs outputs={this.state.outputs} />\n            </CardContent>\n          </Card>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}